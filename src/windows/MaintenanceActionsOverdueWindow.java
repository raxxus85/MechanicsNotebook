/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package windows;

import engine.MotoLogEngine;
import java.awt.Toolkit;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.DefaultTreeModel;
import objectmodels.MaintenanceAction;
import objectmodels.Vehicle;

/**
 *
 * @author Mark
 */
public class MaintenanceActionsOverdueWindow extends javax.swing.JDialog {
    private MotoLogEngine motoLogEngine;
    
    /**
     * Creates new form MaintenanceReminderWindow
     */
    public MaintenanceActionsOverdueWindow(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**
     * Creates new form MaintenanceReminderWindow
     */
    public MaintenanceActionsOverdueWindow(java.awt.Frame parent, boolean modal,MotoLogEngine incomingMotoLogEngine) {
        super(parent, modal);
        initComponents();
        this.motoLogEngine = incomingMotoLogEngine;
        this.setIcon();
        this.setTitle("Maintenance Actions Currently Overdue");
        
        // time to mess with jtree
        //create the root node
        DefaultMutableTreeNode root = new DefaultMutableTreeNode(this.motoLogEngine.getCurrentCustomer().toString());
        //create the child nodes
        //DefaultMutableTreeNode vegetableNode = new DefaultMutableTreeNode("Vegetables");
        //DefaultMutableTreeNode fruitNode = new DefaultMutableTreeNode("Fruits");
 
        //add the child nodes to the root node
        //root.add(vegetableNode);
        //root.add(fruitNode);
         
        //create the tree by passing in the root node
        //tree = new JTree(root);
        //add(tree);
        //overdueMaintenanceActionsJTree = new JTree(root);
        //overdueMaintenanceActionsJTree.removeAll();
        //overdueMaintenanceActionsJTree.setModel(null);
        //this.pack();
        this.updateMaintenanceActionsOverdueJTree();

    }

    private void updateMaintenanceActionsOverdueJTree(){
        DefaultMutableTreeNode root = new DefaultMutableTreeNode(this.motoLogEngine.getCurrentCustomer().toString());
        DefaultTreeModel model = (DefaultTreeModel) overdueMaintenanceActionsJTree.getModel();
        model.setRoot(root);
        
        for(Vehicle vehicle :this.motoLogEngine.getCurrentCustomer().getVehicles()){
            if(this.motoLogEngine.vehicleHasOverDueMaintenanceActions(vehicle)){
                // vehicle has overdue maintenance actions!!
                DefaultMutableTreeNode vehicleNode = new DefaultMutableTreeNode(vehicle.toString());
                // GET OVER DUE MAINTENANCE ACTIONS FOR THIS VEHICLE NOW
                ArrayList<MaintenanceAction> overDueMaintenanceActions = this.motoLogEngine.getOverDueMaintenanceActions(vehicle);
                // time to add them to the vehicle node here
                for(MaintenanceAction temp : overDueMaintenanceActions){
                    int testInt = vehicle.getOdometer() - (temp.getOdometer() + temp.getMaintenanceType().getMileageInterval());
                    vehicleNode.add(new DefaultMutableTreeNode(temp.toString() + ", "+testInt + " miles over due!"));
                }
                root.add(vehicleNode);
            }           
        }
        // set the maintenance action icons... 
        ImageIcon imageIcon = new ImageIcon(getClass().getResource("/maintenanceAction16x16ALERT.png"));
        DefaultTreeCellRenderer renderer = new DefaultTreeCellRenderer();
        renderer.setLeafIcon(imageIcon);
        overdueMaintenanceActionsJTree.setCellRenderer(renderer);
        model.reload();
    }
    
    private void setIcon(){
        //setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/mechanicIcon.png")));
        //setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/MGFavicon.png")));
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource(this.motoLogEngine.getMotoLogIcon())));
    }
    
    //ImageIcon imageIcon = new ImageIcon(getClass().getResource("/maintenanceAction32x32ALERT.png"));
    //DefaultTreeCellRenderer renderer = new DefaultTreeCellRenderer();
    //renderer.setLeafIcon(imageIcon);
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        closeButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        overdueMaintenanceActionsJTree = new javax.swing.JTree();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jScrollPane1.setViewportView(overdueMaintenanceActionsJTree);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 217, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(156, 156, 156)
                        .addComponent(closeButton)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(closeButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_closeButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MaintenanceActionsOverdueWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MaintenanceActionsOverdueWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MaintenanceActionsOverdueWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MaintenanceActionsOverdueWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                MaintenanceActionsOverdueWindow dialog = new MaintenanceActionsOverdueWindow(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton closeButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTree overdueMaintenanceActionsJTree;
    // End of variables declaration//GEN-END:variables
}
