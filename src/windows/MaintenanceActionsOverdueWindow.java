/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package windows;

import engine.MotoGarageNotebookEngine;
import java.awt.Toolkit;
import java.util.ArrayList;
import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import objectmodels.MaintenanceAction;
import objectmodels.Vehicle;

/**
 *
 * @author Mark
 */
public class MaintenanceActionsOverdueWindow extends javax.swing.JDialog {
    private MotoGarageNotebookEngine motoGarageNotebookEngine;
    
    /**
     * Creates new form MaintenanceReminderWindow
     */
    public MaintenanceActionsOverdueWindow(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**
     * Creates new form MaintenanceReminderWindow
     */
    public MaintenanceActionsOverdueWindow(java.awt.Frame parent, boolean modal,MotoGarageNotebookEngine incomingMotoGarageNotebookEngine) {
        super(parent, modal);
        initComponents();
        this.motoGarageNotebookEngine = incomingMotoGarageNotebookEngine;
        this.setIcon();
        this.setTitle("Maintenance Actions Currently Overdue");
        
        // time to mess with jtree
        //create the root node
        DefaultMutableTreeNode root = new DefaultMutableTreeNode(this.motoGarageNotebookEngine.getCurrentCustomer().toString());
        //create the child nodes
        //DefaultMutableTreeNode vegetableNode = new DefaultMutableTreeNode("Vegetables");
        //DefaultMutableTreeNode fruitNode = new DefaultMutableTreeNode("Fruits");
 
        //add the child nodes to the root node
        //root.add(vegetableNode);
        //root.add(fruitNode);
         
        //create the tree by passing in the root node
        //tree = new JTree(root);
        //add(tree);
        //overdueMaintenanceActionsJTree = new JTree(root);
        //overdueMaintenanceActionsJTree.removeAll();
        //overdueMaintenanceActionsJTree.setModel(null);
        //this.pack();
        this.updateMaintenanceActionsOverdueJTree();

    }

    private void updateMaintenanceActionsOverdueJTree(){
        DefaultMutableTreeNode root = new DefaultMutableTreeNode(this.motoGarageNotebookEngine.getCurrentCustomer().toString());
        DefaultTreeModel model = (DefaultTreeModel) overdueMaintenanceActionsJTree.getModel();
        model.setRoot(root);
        //DefaultMutableTreeNode root2 = (DefaultMutableTreeNode) model.getRoot();
        //model.insertNodeInto(new DefaultMutableTreeNode("another_child"), root2, root2.getChildCount());
        //model.reload();
        //test
        //create the child nodes
        
        for(Vehicle vehicle :this.motoGarageNotebookEngine.getCurrentCustomer().getVehicles()){
            if(this.motoGarageNotebookEngine.vehicleHasOverDueMaintenanceActions(vehicle)){
                // vehicle has overdue maintenance actions!!
                DefaultMutableTreeNode vehicleNode = new DefaultMutableTreeNode(vehicle.toString());
                // GET OVER DUE MAINTENANCE ACTIONS FOR THIS VEHICLE NOW
                ArrayList<MaintenanceAction> overDueMaintenanceActions = this.motoGarageNotebookEngine.getOverDueMaintenanceActions(vehicle);
                // time to add them to the vehicle node here
                for(MaintenanceAction temp : overDueMaintenanceActions){
                    int testInt = vehicle.getOdometer() - (temp.getOdometer() + temp.getMaintenanceType().getMileageInterval());
                    vehicleNode.add(new DefaultMutableTreeNode(temp.toString() + ", "+testInt + " miles over due!"));
                }
                root.add(vehicleNode);
            }
            
        }
        
//        DefaultMutableTreeNode vegetableNode = new DefaultMutableTreeNode("Vegetables");
//        vegetableNode.add(new DefaultMutableTreeNode("Capsicum"));
//        vegetableNode.add(new DefaultMutableTreeNode("Carrot"));
//        vegetableNode.add(new DefaultMutableTreeNode("Tomato"));
//        vegetableNode.add(new DefaultMutableTreeNode("Potato"));
//        DefaultMutableTreeNode fruitNode = new DefaultMutableTreeNode("Fruits");
// 
//        //add the child nodes to the root node
//        root.add(vegetableNode);
//        root.add(fruitNode);
        
        model.reload();
    }
    
    private void setIcon(){
        //setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/mechanicIcon.png")));
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/MGFavicon.png")));
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        closeButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        overdueMaintenanceActionsJTree = new javax.swing.JTree();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(overdueMaintenanceActionsJTree);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(167, 167, 167)
                .addComponent(closeButton)
                .addContainerGap(174, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(closeButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_closeButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MaintenanceActionsOverdueWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MaintenanceActionsOverdueWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MaintenanceActionsOverdueWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MaintenanceActionsOverdueWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                MaintenanceActionsOverdueWindow dialog = new MaintenanceActionsOverdueWindow(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton closeButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTree overdueMaintenanceActionsJTree;
    // End of variables declaration//GEN-END:variables
}
